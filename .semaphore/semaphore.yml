version: v1.0
name: Test MyApp
agent:
  machine:
    type: e1-standard-2
    os_image: ubuntu1804
blocks:
	blocks:
  - name: "Install Dependencies"
    task:
      env_vars:
        - name: APP_ENV
          value: prod
      jobs:
        - name: composer
          commands:
            # Checkout code from Git repository. This step is mandatory if the
            # job is to work with your code.
            # Optionally you may use --use-cache flag to avoid roundtrip to
            # remote repository.
  					# See https://docs.semaphoreci.com/article/54-toolbox-reference#libcheckout
            - checkout
            # Try and find a cached version of our /vendor dependencies folder.
            # Semaphore tries to find a partial match.
            # Read about caching: https://docs.semaphoreci.com/article/54-toolbox-reference#cache
            - cache restore
            # Install our project composer
            - composer install
            # Install node dependencies
            - npm install
            # Store the /vendor and node_modules folders into cache for later use.
            - cache store
            # We are setting up the .env file from our example file which contains Semaphore DB data and proper app URL
            - cp .env.example .env
            # We need to generate an application key for Laravel to work.
            - php artisan key:generate
            - mkdir -p database
            - touch database/database.mysql
            - 'php artisan config:cache'
            - php artisan migrate
            - ./vendor/bin/phpunit

  - name: "Run Code Analysis"
    task:
      prologue:
        commands:
          - checkout
          - cache restore
      jobs:
        - name: phpmd
          commands:
            # Run the PHP Mess Detector from our project dependency binary
            - php vendor/bin/phpmd app/ text phpmd_ruleset.xml
        - name: phpcs
          commands:
            # Run the PHP Code Sniffer from our project dependency binary
            - php vendor/bin/phpcs app --report-full --standard=PSR2
        - name: phpcpd
          commands:
            # Run the PHP Copy Paste Detector from online repository.
            - curl -L https://phar.phpunit.de/phpcpd.phar -o phpcpd.phar
            - php phpcpd.phar app/ --min-lines=50

  - name: "Run Unit tests"
    task:
      jobs:
      - name: phpunit
        commands:
          - checkout
          - cache restore
          # Run the unit tests from the phpunit binary in vendor folder
          - ./vendor/bin/phpunit

  - name: "Run Browser tests"
    task:
      jobs:
        - name: laravel dusk
          commands:
            - checkout
            - cp .env.example .env
            # Create an empty .sqlite DB
            - touch database/database.sqlite
            - cache restore
            # Create an application key again.
            - php artisan key:generate
            - php artisan dusk:update --detect
            # Start Laravel's built-in web server so the web driver used by Dusk can connect.
            # We start the server using the .env.dusk.local environment file that uses SQLITE.
            - php artisan serve --env=dusk.local --port=8010 &
            # Run the tests
            - php artisan dusk

  - name: "Run Security Tests"
    task:
      jobs:
        - name: sensiolabs
          commands:
            - checkout
            # We clone the Security Checker repository, and cd into it.
            - git clone https://github.com/sensiolabs/security-checker.git
            - cd security-checker
            # Install Secuirity Checker dependencies (not to be confused by our project dependencies)
            - composer install
            # Finally, run the check
            - php security-checker security:check ../composer.lock
 
     
          
          
          
          

